<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_atf_step_config">
    <sys_atf_step_config action="DELETE">
        <active>true</active>
        <batch_order_constraint/>
        <can_mutate_page>false</can_mutate_page>
        <category/>
        <class_name/>
        <class_type>script</class_type>
        <deprecated>false</deprecated>
        <description_generator><![CDATA[function generateDescription() {
    // the global variable 'step' represents the current glide record
    var description = "";
	// your code here
	return description;
}
 generateDescription();
]]></description_generator>
        <html_description><![CDATA[<p>Test 3</p>]]></html_description>
        <icon>icon-article-document</icon>
        <inputs/>
        <name>Test 3</name>
        <order>1000</order>
        <outputs/>
        <step_env display_value="Server - Independent">6c2bcea1870312009dccc9ded0e3ecca</step_env>
        <step_execution_generator><![CDATA[// The inputs are a map of the variables defined in the inputs related list below.
// Inputs are consumed in the step configuration. Input
// values may be hardcoded or mapped from the outputs of a previous step.
// If a test author using your step uses mapping to pass in an output from a previous 
// test step then when referencing the input variable the mapping will be resolved 
// automatically
//  Example:
//      var myRecords = new GlideRecord(inputs.table);
//
// The outputs are a map of the variables defined in the outputs related list.
// Outputs should be set (assigned) in order to pass data out of a test step that
// can be consumed my mapping as an input to subsequent steps. 
//  Example:
//      outputs.table = gr.getRecordClassName()
//
//
// Note that inputs and outputs are strongly typed as defined in their variable definition.
// Their behavior is the same as a dictionary defined field of the same type in a table.
//
// The stepResult is a simple API for controlling the step pass/fail and logging with three
// methods:
//      stepResult.setFailed: Causes step to fail
//
//      stepResult.setSuccess: Causes step to succeed
//
//      stepResult.setOutputMessage: Log a message to step results after step executes.
//            Can only be called once or will overwrite previous 
//            message
//
// If neither setFailed or setSuccess is called the default is to succeed.
//
// See 'Record Query' for an example of a scripted step config 
// or see test 'Check change approvals get generated'
//
// Example usage of step timeout in script
//      var counter = 0;
//      // 'timeout' is a field on the step form
//      while (counter <= timeout) {
//            if (desiredOutcome) {
//                stepResult.setOutputMessage('Success!');
//                stepResult.setSuccess();
//                return;
//            }
//            counter++;
//            gs.sleep(1000);
//      }
//
//      // desired outcome did not occur within the timeout
//      stepResult.setOutputMessage('Failure!');
//      stepResult.setFailed();
//
(function executeStep(inputs, outputs, stepResult, timeout) {
    var t = new x_172493_jit_atf.TestATFUtils().testAtf();
	gs.info(t);
    stepResult.setOutputMessage('Success!');
    stepResult.setSuccess();
    return;
}(inputs, outputs, stepResult, timeout));]]></step_execution_generator>
        <sys_class_name>sys_atf_step_config</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-04-11 15:36:41</sys_created_on>
        <sys_id>92608bea1b005010b70431d7dc4bcb0b</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>Test 3</sys_name>
        <sys_package display_value="JIT ATF Configurator" source="x_172493_jit_atf">a95f321e1b841010b70431d7dc4bcb50</sys_package>
        <sys_policy/>
        <sys_scope display_value="JIT ATF Configurator">a95f321e1b841010b70431d7dc4bcb50</sys_scope>
        <sys_update_name>sys_atf_step_config_92608bea1b005010b70431d7dc4bcb0b</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-04-11 15:37:35</sys_updated_on>
        <template_reminder>Test 3</template_reminder>
        <type display_value="Test Step" name="sys_atf_step">d3ccc615983500107f2c2ed01a1f16e4</type>
        <wizard_redirect/>
    </sys_atf_step_config>
    <sys_translated_text action="DELETE" query="documentkey=92608bea1b005010b70431d7dc4bcb0b"/>
    <sys_variable_value action="DELETE" query="document_key=92608bea1b005010b70431d7dc4bcb0b"/>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="JIT ATF Configurator">a95f321e1b841010b70431d7dc4bcb50</application>
        <file_path/>
        <instance_id>f3d19df3db7677443050ac44d496195f</instance_id>
        <instance_name>dev89633</instance_name>
        <name>sys_atf_step_config_92608bea1b005010b70431d7dc4bcb0b</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_atf_step_config"&gt;&lt;sys_atf_step_config action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;batch_order_constraint/&gt;&lt;can_mutate_page&gt;false&lt;/can_mutate_page&gt;&lt;category/&gt;&lt;class_name/&gt;&lt;class_type&gt;script&lt;/class_type&gt;&lt;deprecated&gt;false&lt;/deprecated&gt;&lt;description_generator&gt;&lt;![CDATA[function generateDescription() {
    // the global variable 'step' represents the current glide record
    var description = "";
	// your code here
	return description;
}
 generateDescription();
]]&gt;&lt;/description_generator&gt;&lt;html_description&gt;&lt;![CDATA[&lt;p&gt;Test 3&lt;/p&gt;]]&gt;&lt;/html_description&gt;&lt;icon&gt;icon-article-document&lt;/icon&gt;&lt;inputs/&gt;&lt;name&gt;Test 3&lt;/name&gt;&lt;order&gt;1000&lt;/order&gt;&lt;outputs/&gt;&lt;step_env display_value="Server - Independent"&gt;6c2bcea1870312009dccc9ded0e3ecca&lt;/step_env&gt;&lt;step_execution_generator&gt;&lt;![CDATA[// The inputs are a map of the variables defined in the inputs related list below.
// Inputs are consumed in the step configuration. Input
// values may be hardcoded or mapped from the outputs of a previous step.
// If a test author using your step uses mapping to pass in an output from a previous 
// test step then when referencing the input variable the mapping will be resolved 
// automatically
//  Example:
//      var myRecords = new GlideRecord(inputs.table);
//
// The outputs are a map of the variables defined in the outputs related list.
// Outputs should be set (assigned) in order to pass data out of a test step that
// can be consumed my mapping as an input to subsequent steps. 
//  Example:
//      outputs.table = gr.getRecordClassName()
//
//
// Note that inputs and outputs are strongly typed as defined in their variable definition.
// Their behavior is the same as a dictionary defined field of the same type in a table.
//
// The stepResult is a simple API for controlling the step pass/fail and logging with three
// methods:
//      stepResult.setFailed: Causes step to fail
//
//      stepResult.setSuccess: Causes step to succeed
//
//      stepResult.setOutputMessage: Log a message to step results after step executes.
//            Can only be called once or will overwrite previous 
//            message
//
// If neither setFailed or setSuccess is called the default is to succeed.
//
// See 'Record Query' for an example of a scripted step config 
// or see test 'Check change approvals get generated'
//
// Example usage of step timeout in script
//      var counter = 0;
//      // 'timeout' is a field on the step form
//      while (counter &lt;= timeout) {
//            if (desiredOutcome) {
//                stepResult.setOutputMessage('Success!');
//                stepResult.setSuccess();
//                return;
//            }
//            counter++;
//            gs.sleep(1000);
//      }
//
//      // desired outcome did not occur within the timeout
//      stepResult.setOutputMessage('Failure!');
//      stepResult.setFailed();
//
(function executeStep(inputs, outputs, stepResult, timeout) {
    var t = new x_172493_jit_atf.TestATFUtils().testAtf();
	gs.info(t);
    stepResult.setOutputMessage('Success!');
    stepResult.setSuccess();
    return;
}(inputs, outputs, stepResult, timeout));]]&gt;&lt;/step_execution_generator&gt;&lt;sys_class_name&gt;sys_atf_step_config&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2020-04-11 15:36:41&lt;/sys_created_on&gt;&lt;sys_id&gt;92608bea1b005010b70431d7dc4bcb0b&lt;/sys_id&gt;&lt;sys_mod_count&gt;1&lt;/sys_mod_count&gt;&lt;sys_name&gt;Test 3&lt;/sys_name&gt;&lt;sys_package display_value="JIT ATF Configurator" source="x_172493_jit_atf"&gt;a95f321e1b841010b70431d7dc4bcb50&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="JIT ATF Configurator"&gt;a95f321e1b841010b70431d7dc4bcb50&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_atf_step_config_92608bea1b005010b70431d7dc4bcb0b&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2020-04-11 15:37:35&lt;/sys_updated_on&gt;&lt;template_reminder&gt;Test 3&lt;/template_reminder&gt;&lt;type display_value="Test Step" name="sys_atf_step"&gt;d3ccc615983500107f2c2ed01a1f16e4&lt;/type&gt;&lt;wizard_redirect/&gt;&lt;/sys_atf_step_config&gt;&lt;sys_translated_text action="delete_multiple" query="documentkey=92608bea1b005010b70431d7dc4bcb0b"/&gt;&lt;sys_variable_value action="delete_multiple" query="document_key=92608bea1b005010b70431d7dc4bcb0b"/&gt;&lt;/record_update&gt;</payload>
        <payload_hash>1874640257</payload_hash>
        <record_name>Test 3</record_name>
        <reverted_from/>
        <source>2d5f321e1b841010b70431d7dc4bcb52</source>
        <source_table>sys_update_set</source_table>
        <state>previous</state>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-04-11 15:37:35</sys_created_on>
        <sys_id>cff04bea1b005010b70431d7dc4bcb8c</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>17169e396a80000001</sys_recorded_at>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-04-11 15:37:35</sys_updated_on>
        <type>Test Step Config</type>
        <update_guid>4bf04beaac00501035dba80ad766ac8c</update_guid>
        <update_guid_history>4bf04beaac00501035dba80ad766ac8c:1874640257,cac04feaae00501079e678c95c3af65d:-101382542</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete/>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-04-11 15:41:14</sys_created_on>
        <sys_db_object display_value="" name="sys_atf_step_config">sys_atf_step_config</sys_db_object>
        <sys_id>00c80cc74f0c492080311be37abd6244</sys_id>
        <sys_metadata>92608bea1b005010b70431d7dc4bcb0b</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Test 3</sys_name>
        <sys_package display_value="JIT ATF Configurator" source="x_172493_jit_atf">a95f321e1b841010b70431d7dc4bcb50</sys_package>
        <sys_parent/>
        <sys_policy/>
        <sys_scope display_value="JIT ATF Configurator">a95f321e1b841010b70431d7dc4bcb50</sys_scope>
        <sys_scope_delete display_value="">2db1596f993d4a2a9d316f5c3e1b0564</sys_scope_delete>
        <sys_update_name>sys_atf_step_config_92608bea1b005010b70431d7dc4bcb0b</sys_update_name>
        <sys_update_version display_value="sys_atf_step_config_92608bea1b005010b70431d7dc4bcb0b">cff04bea1b005010b70431d7dc4bcb8c</sys_update_version>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-04-11 15:41:14</sys_updated_on>
    </sys_metadata_delete>
</record_update>
